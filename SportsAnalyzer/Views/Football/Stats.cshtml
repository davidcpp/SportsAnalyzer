@model SportsAnalyzer.Models.Statistics

@{
  ViewBag.Title = "Stats";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="text-center my-4 my-sm-5">Statistics</h1>
<div class="row mb-4 mb-sm-5">
  <canvas id="myChart"></canvas>
</div>
<div class="row mb-4 mb-sm-5 justify-content-center">
  <div class="table-responsive-lg w-100">
    <table class="table">
      <thead class="thead-light">
        <tr>
          <th>
            @Html.DisplayNameFor(model => model.LeagueName)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.TeamName)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.MatchesNumber)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.GoalsSum)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.GoalsAvg)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.GoalsAvgHome)
          </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            @Html.DisplayFor(model => model.LeagueName)
          </td>
          <td>
            @Html.DisplayFor(model => model.TeamName)
          </td>
          <td>
            @Html.DisplayFor(model => model.MatchesNumber)
          </td>
          <td>
            @Html.DisplayFor(model => model.GoalsSum)
          </td>
          <td>
            @Html.DisplayFor(model => model.GoalsAvg)
          </td>
          <td>
            @Html.DisplayFor(model => model.GoalsAvgHome)/@Html.DisplayFor(model => model.GoalsAvgAway)
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
@using (Html.BeginForm("Stats", "Football", FormMethod.Post, new { @class = "" }))
{
  @Html.AntiForgeryToken()
  @Html.ValidationSummary(true, "", new { @class = "text-danger" })
  @Html.HiddenFor(model => model.LeagueName)
  @Html.HiddenFor(model => model.SeasonYear)

  <div class="form-group row justify-content-center">
    @Html.LabelFor(model => model.RoundsSelectList,
                                      htmlAttributes: new { @class = "col-sm-auto col-form-label" })
    <div class="col-sm-3">
      @Html.ListBoxFor(model => model.RoundsNumbersInts, Model.RoundsSelectList, new { @class = "form-control" })
      @Html.ValidationMessageFor(i => i.RoundsSelectList, "", new { @class = "text-warning" })
    </div>
  </div>
  <div class="form-group row justify-content-center">
    <div class="col-sm-5">
      <input type="submit" value="Chose rounds" class="btn btn-primary btn-block" />
    </div>
  </div>
}

@{
  double[] GoalsInIntervalsPercent = Model.GoalsInIntervalsPercent;
  double[] TimeIntervalsLimits = Model.TimeIntervalsLimits;
  string[] TimeIntervalsTexts = new string[TimeIntervalsLimits.Count() - 1];

  for (int i = 0; i < TimeIntervalsTexts.Count(); i++)
  {
    TimeIntervalsTexts[i] = TimeIntervalsLimits[i].ToString() + "-" + TimeIntervalsLimits[i + 1].ToString();
  }
  var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
}

@section Scripts
{
  <script>
    var paddingLeft, paddingRight, paddingTop, paddingBottom;

    function GetChartDisplaySize()
    {
      var canvasChart = document.getElementById('myChart');

      chartDisplaySize = {
        width: parseFloat(canvasChart.style.width),
        height: parseFloat(canvasChart.style.height)
      };
      return chartDisplaySize;
    }

    function GetWindowWidth()
    {
      var width = window.innerWidth
        || document.documentElement.clientWidth
        || document.body.clientWidth;
      return width;
    }

    function GetWindowHeight()
    {
      var height = window.innerHeight
        || document.documentElement.clientHeight
        || document.body.clientHeight;
      return height;
    }

    function WriteWindowSizes()
    {
      console.log("Browser inner window width: " + GetWindowWidth() + ", height: " + GetWindowHeight() + ".");
    }

    function UpdateChartLayout(chart, chartSize)
    {
      paddingLeft = paddingRight = Math.round(0.04 * chartSize.width);
      paddingTop = paddingBottom = Math.round(0.04 * chartSize.width);

      if (typeof chart !== "undefined")
      {
        chart.options.layout.padding = {
          left: paddingLeft,
          right: paddingRight,
          top: paddingTop,
          bottom: paddingBottom
        }
      }
    }

    function UpdateChartFontSizes(chart, chartSize)
    {
      if (typeof chartSize !== "undefined")
      {
        legendFontSize = Math.round(0.01 * chartSize.width + 8);
        varTitleFontSize = Math.round(0.015 * chartSize.width + 8);
        tooltipsFontSize = Math.round(0.005 * chartSize.width + 10);
        labelsFontSize = Math.round(0.005 * chartSize.width + 10);
        ticksFontSize = Math.round(0.005 * chartSize.width + 10);

        console.log("Font sizes for chart - Variables values: ");
        console.log([varTitleFontSize, ticksFontSize, legendFontSize, tooltipsFontSize, labelsFontSize].toString())
      }

      if (typeof chart !== "undefined")
      {    
        chart.options.title.fontSize = varTitleFontSize;
        chart.options.legend.labels.fontSize = legendFontSize;
        chart.options.tooltips.titleFontSize = tooltipsFontSize;
        chart.options.tooltips.bodyFontSize = tooltipsFontSize;
        chart.options.scales.yAxes[0].scaleLabel.fontSize = labelsFontSize;
        chart.options.scales.xAxes[0].scaleLabel.fontSize = labelsFontSize;
        chart.options.scales.yAxes[0].ticks.fontSize = ticksFontSize;
        chart.options.scales.xAxes[0].ticks.fontSize = ticksFontSize;
      } 
    }

    function PrepareChartData()
    {
      color = Chart.helpers.color;
      goalsInIntervalsPercent = eval('@serializer.Serialize(GoalsInIntervalsPercent)');
      timeIntervalsAllText = '@serializer.Serialize(TimeIntervalsTexts)';
      timeIntervalsAllText = timeIntervalsAllText.substring(1, timeIntervalsAllText.length - 1);
      timeIntervalsAllText = timeIntervalsAllText.replace(new RegExp('&quot;','g'), '');
      timeIntervalsTexts = timeIntervalsAllText.split(",");
    }

    function OnResizeChart(chart, chartSize)
    {
      console.count("OnResizeChart");
      console.log("New Chart Size:");
      console.log(chartSize);
      WriteWindowSizes();

      UpdateChartLayout(chart, chartSize);
      UpdateChartFontSizes(chart, chartSize);
      chart.update();
    }

    function CreateChart()
    {
      PrepareChartData();

      var ctx = $("#myChart");
      //var ctx = document.getElementById('myChart').getContext('2d');
      var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'bar',
        // The data for our dataset
        data: {
          labels: timeIntervalsTexts,
          datasets: [{
            label: 'Percent of goals',
            backgroundColor: color(window.chartColors.blue).alpha(0.5).rgbString(),
            borderColor: window.chartColors.blue,
            borderWidth: 1,
            data: goalsInIntervalsPercent,
          }]

        },
        // Configuration options go here
        options: {
          responsive: true,
          layout: {
            padding: {
              left: paddingLeft,
              right: paddingRight,
              top: paddingTop,
              bottom: paddingBottom
            }
          },
          legend: {
            position: 'top',
            labels: {
              fontSize: legendFontSize
            }
          },
          title: {
            display: true,
            fontSize: varTitleFontSize,
            fontColor: window.chartColors.black,
            text: 'Minutes Intervales of scored goals'
          },
          tooltips: {
            titleFontSize: tooltipsFontSize,
            bodyFontSize: tooltipsFontSize,
            callbacks: {
              label: function (tooltipItem, data)
              {
                var label = data.datasets[tooltipItem.datasetIndex].label || '';

                if (label)
                {
                  label += ': ';
                }
                label += tooltipItem.yLabel;
                label += "%";
                return label;
              }
            }
          },
          scales: {
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Percent of goals',
                fontColor: window.chartColors.blue,
                fontSize: labelsFontSize
              },
              ticks: {
                beginAtZero: true,
                fontSize: ticksFontSize,
                callback: function (value, index, values)
                {
                  return value + '%';
                }
              }
            }],
            xAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Time intervals [min.]',
                fontColor: window.chartColors.blue,
                fontSize: labelsFontSize
              },
              ticks: {
                fontSize: ticksFontSize
              },
              gridLines: {
                offsetGridLines: true
              }
            }]
          }
        }
      });
      chart.options.onResize = OnResizeChart;
      return chart;
    }

    function OnPageLoad()
    {
      WriteWindowSizes();

      chart = CreateChart();

      chartDisplaySize = GetChartDisplaySize();
      UpdateChartLayout(chart, chartDisplaySize);
      UpdateChartFontSizes(chart, chartDisplaySize);
      chart.update();
    }

    OnPageLoad();

  </script>
}


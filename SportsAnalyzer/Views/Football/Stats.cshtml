@model SportsAnalyzer.Models.Statistics

@{
  ViewBag.Title = "Stats";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Statistics</h2>
<div class="container">
  <div class="well">
    <div class="row bottom50">
      <canvas id="myChart"></canvas>
    </div>
  </div>
  <div class="well">
    <div class="row bottom50">
      <div class="table-responsive">
        <table class="table">
          <tr>
            <th>
              @Html.DisplayNameFor(model => model.LeagueName)
            </th>
            <th>
              @Html.DisplayNameFor(model => model.TeamName)
            </th>
            <th>
              @Html.DisplayNameFor(model => model.MatchesNumber)
            </th>
            <th>
              @Html.DisplayNameFor(model => model.GoalsSum)
            </th>
            <th>
              @Html.DisplayNameFor(model => model.GoalsAvg)
            </th>
            <th>
              @Html.DisplayNameFor(model => model.GoalsAvgHome)
            </th>
          </tr>

          <tr>
            <td>
              @Html.DisplayFor(model => model.LeagueName)
            </td>
            <td>
              @Html.DisplayFor(model => model.TeamName)
            </td>
            <td>
              @Html.DisplayFor(model => model.MatchesNumber)
            </td>
            <td>
              @Html.DisplayFor(model => model.GoalsSum)
            </td>
            <td>
              @Html.DisplayFor(model => model.GoalsAvg)
            </td>
            <td>
              @Html.DisplayFor(model => model.GoalsAvgHome)/@Html.DisplayFor(model => model.GoalsAvgAway)
            </td>
          </tr>

        </table>
      </div>
    </div>
  </div>
  <div class="row bottom50 center">
    <div class="well">
      @using (Html.BeginForm("Stats", "Football", FormMethod.Post, new { @class = "form-horizontal" }))
      {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
          @Html.ValidationSummary(true, "", new { @class = "text-danger" })
          @Html.HiddenFor(model => model.LeagueName)
          @Html.HiddenFor(model => model.SeasonYear)
          <div class="form-group">
            @Html.LabelFor(model => model.RoundsSelectList,
                                htmlAttributes: new { @class = "control-label col-xs-12 col-sm-6" })
            <div class="col-xs-12 col-sm-6">
              @Html.ListBoxFor(model => model.RoundsNumbersInts, Model.RoundsSelectList, new { @class = "form-control" })
              @Html.ValidationMessageFor(i => i.RoundsSelectList, "", new { @class = "text-warning" })
            </div>
          </div>
          <div class="form-group">
            <div class="col-xs-12 col-sm-offset-6 col-sm-6">
              <input type="submit" value="Chose rounds" class="btn btn-default" />
            </div>
          </div>
        </div>
      }
    </div>
  </div>
</div>
@{
  double[] GoalsInIntervalsPercent = Model.GoalsInIntervalsPercent;
  double[] TimeIntervalsLimits = Model.TimeIntervalsLimits;
  string[] TimeIntervalsTexts = new string[TimeIntervalsLimits.Count() - 1];

  for (int i = 0; i < TimeIntervalsTexts.Count(); i++)
  {
    TimeIntervalsTexts[i] = TimeIntervalsLimits[i].ToString() + "-" + TimeIntervalsLimits[i + 1].ToString();
  }
  var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
}

@section Scripts
{
  <script>
    var color = Chart.helpers.color;
    var goalsInIntervalsPercent = eval('@serializer.Serialize(GoalsInIntervalsPercent)');
    var timeIntervalsAllText = '@serializer.Serialize(TimeIntervalsTexts)';
    timeIntervalsAllText = timeIntervalsAllText.substring(1, timeIntervalsAllText.length - 1);
    timeIntervalsAllText = timeIntervalsAllText.replace(new RegExp('&quot;','g'), '');
    var timeIntervalsTexts = timeIntervalsAllText.split(",");

    var ctx = document.getElementById('myChart').getContext('2d');
    var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'bar',
      // The data for our dataset
      data: {
        labels: timeIntervalsTexts,
        datasets: [{
          label: 'Percent of goals',
          backgroundColor: color(window.chartColors.blue).alpha(0.5).rgbString(),
          borderColor: window.chartColors.blue,
          borderWidth: 1,
          data: goalsInIntervalsPercent,
        }]

      },
      // Configuration options go here
      options: {
        responsive: true,
        legend: {
          position: 'top',
        },
        title: {
          display: true,
          fontSize: 24,
          fontColor: window.chartColors.black,
          text: 'Minutes Intervales of scored goals'
        },
        tooltips: {
          callbacks: {
            label: function (tooltipItem, data)
            {
              var label = data.datasets[tooltipItem.datasetIndex].label || '';

              if (label)
              {
                label += ': ';
              }
              label += tooltipItem.yLabel;
              label += "%";
              return label;
            }
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Percent of goals',
              fontColor: window.chartColors.blue,
            },
            ticks: {
              beginAtZero: true,
              callback: function (value, index, values)
              {
                return value + '%';
              }
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Time intervals [min.]',
              fontColor: window.chartColors.blue,
            },
            gridLines: {
              offsetGridLines: true
            }
          }]
        },

      }

    });

  </script>
}

